# This workflow will build a Java project with Gradle and push to GitHub container registry ..
name: build and push image to github container registry

on:
  push:
    branches: [ azure-aks ]

  #Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLUSTER_NAME: demo-aks
  CLUSTER_RESOURCE_GROUP: my_group
  # Define tags to use for Docker images based on Git tags/branches (for docker/metadata-action)
  # For a new commit on default branch (master), use the literal tag 'latest' on Docker image.
  # For a new commit on other branches, use the branch name as the tag for Docker image.
  # For a new tag, copy that tag name as the tag for Docker image.
  IMAGE_TAGS: |
    type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
    type=ref,event=branch,enable=${{ !endsWith(github.ref, github.event.repository.default_branch) }}
    type=ref,event=tag
  # Define default tag "flavor" for docker/metadata-action per
  # https://github.com/docker/metadata-action#flavor-input
  # We turn off 'latest' tag by default.
  TAGS_FLAVOR: |
    latest=false


jobs:
  build-and-push-image:
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3.4.0
        with:
          java-version: 17
          distribution: 'microsoft'
          cache: gradle

      - name: make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        env:
          mongodb_host: localhost
        run: ./gradlew build

      - name: Extract metadata (tags, labels) for registry
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=0.${{ github.RUN_NUMBER }}.${{ github.RUN_ATTEMPT }}.0.${{ github.ACTION }}


      - name: Log in to the Container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0


      # - name: Build and Push Image to Container Registry
      #   run: |
      #     echo "building container image"
      #     docker build -t ${{ steps.meta.outputs.tags }} .
      #     echo "Pushing image to Container Registry"
      #     docker push ${{ steps.meta.outputs.tags }}

      - name: Build and Push Image to Container Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  deployment:
    name: deployment
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Azure Login
        uses: Azure/login@v1.4.5
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
      
      - name: Set the target Azure Kubernetes Service (AKS) cluster. 
        uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          

      - name: Deploy using Helm
        run: helm upgrade --install release-name-demo helm-demo/ --set image.tag=0.${{ github.RUN_NUMBER }}.${{ github.RUN_ATTEMPT }}.0.${{ github.ACTION }} --namespace demo-namespace --create-namespace --wait
          

      - name: Verify Deployment
        run: kubectl rollout status deployment/demo -n demo-namespace
